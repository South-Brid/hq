进程前面已经学习了
frok();//父子进程
wait(0);
waitpid(-1,NULL,0);//0表示阻塞
exit(0);_exit(0);

进程间得通信得方式
1.无名管道
特点：
适用于有亲缘关系见得进程通行
半双工工作模式
打开两个文件描述符fd[0]fd[1],fd[0]是读端，fd[1]是写端

函数pipe
管道内部无数据，进行读操作会导致阻塞
管道内部无数据，将写端关闭，进行读操作会立刻返回
将读端关闭，进行写操作会导致管道破裂
管道满为64k，需要4k得空间才能进行写操作

#include<stdio.h>

char arr[32]="";
int main()
{
    int fd[2]={};
   if(pipe(fd)<0)
   {
       perror("pipe");
       return -1;
   }
    pid_t pid;
    pid=frok();
    if(pid<0)
    {
        perror("fork");
        return -1;
    }else if(pid == 0)
    {
        while(1)
        {
            read(fd[0],arr,32);
             if(strcmp(arr,"quite")==0)
        {
            break;
        }
            printf("%s\n",arr);
            
        }
                exit(0);

    }else
    {
        while(1)
        {
        scanf("%s",arr);
        write(fd[1],arr,32);
        if(strcmp(arr,"quite")==0)
        {
            break;
        }
        }
        wati(NULL);
        exit(0);
    }
}

2.有名管道
能连接两个相互独立得进程
有名管道遵循先入先出得特点，不支持lseek
使用文件io操作

函数API
mkfifo

//有名管道实现复制
#include<stdio.h>
int main()
{
    char arr[32];
    if(mkfifo("./fifo")!=0)
    {
        perror("mkfifo");
        return -1;
    }
    int pid_fifo;
    pid_fifo=open("./fifo",O_WDONLY);
    if(pid_fifo<0)
    {
        perror("openfifo");
        return -1;   
    }
    int pid_file;
    pid_file=open(argv[1],O_RDONLY);
    if(pid_file<0)
    {
        perror("openfile");
        return -1;
    }
    int ch = 0;
    while(1)
    {
        ch = read(pid_fife,arr,32);
        if(ch == 0)
        break;
        write(pid_fifo,arr,ch);
    }

    //写端
    while(1)
    {
        ch=read(pid_fifo,arr,32);
        if(ch == 0)
        break;
        write(pid_fifo,arr,ch);
    }


}